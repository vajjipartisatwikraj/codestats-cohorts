{
  "title": "3Sum",
  "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.\n\nInput Format:\n- The first line contains a single integer T, the number of test cases.\n- For each test case:\n  - A single line containing an array of integers in the format [x1,x2,...,xn].\n\nOutput Format:\n- For each test case, print all triplets [a,b,c] that sum to 0 in ascending order, one triplet per line.\n- Triplets should be sorted in non-decreasing order.\n- If there are no triplets, print \"No triplets found\".",
  "constraints": {
    "timeLimit": 1000,
    "memoryLimit": 256
  },
  "constraintsDesc": [
    "3 <= nums.length <= 3000",
    "-10^5 <= nums[i] <= 10^5"
  ],
  "examples": [
    {
      "input": "3\n[-1,0,1,2,-1,-4]\n[0,1,1]\n[0,0,0]",
      "output": "[-1,-1,2]\n[-1,0,1]\nNo triplets found\n[0,0,0]",
      "explanation": "Test case 1: There are two triplets that sum to 0: [-1,-1,2] and [-1,0,1].\nTest case 2: No triplets sum to 0.\nTest case 3: The only triplet is [0,0,0]."
    }
  ],
  "type": "programming",
  "difficultyLevel": "medium",
  "marks": 10,
  "tags": ["Array", "Two Pointers", "Sorting"],
  "maintag": "Data Structures & Algorithms",
  "companies": ["Amazon", "Microsoft", "Apple", "Facebook", "Bloomberg", "Adobe", "Oracle", "IBM"],
  "hints": [
    "Sort the array first to make handling duplicates easier",
    "Use a two-pointer approach (similar to Two Sum) after fixing one element",
    "To avoid duplicates, skip repeated values when iterating through the array"
  ],
  "languages": [
    {
      "name": "java",
      "version": "15.0.2",
      "boilerplateCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Finds all unique triplets in the array that sum to zero.\n     * @param nums The input array of integers.\n     * @return A list of all unique triplets that sum to zero.\n     */\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Implement your solution here\n        return new ArrayList<>(); // Replace with your implementation\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                List<List<Integer>> result = sol.threeSum(nums);\n                /*RUNTIME CALC END*/\n                \n                // Print results\n                if (result.isEmpty()) {\n                    System.out.println(\"No triplets found\");\n                } else {\n                    for (List<Integer> triplet : result) {\n                        System.out.print(\"[\");\n                        for (int j = 0; j < triplet.size(); j++) {\n                            System.out.print(triplet.get(j));\n                            if (j < triplet.size() - 1) {\n                                System.out.print(\",\");\n                            }\n                        }\n                        System.out.println(\"]\");\n                    }\n                }\n                \n                if (i < t - 1) {\n                    System.out.println();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
      "solutionCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Finds all unique triplets in the array that sum to zero.\n     * @param nums The input array of integers.\n     * @return A list of all unique triplets that sum to zero.\n     */\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (nums == null || nums.length < 3) {\n            return result;\n        }\n        \n        // Sort the array to handle duplicates and use two-pointer approach\n        Arrays.sort(nums);\n        \n        for (int i = 0; i < nums.length - 2; i++) {\n            // Skip duplicate values for i\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            \n            int target = -nums[i];\n            int left = i + 1;\n            int right = nums.length - 1;\n            \n            while (left < right) {\n                int sum = nums[left] + nums[right];\n                \n                if (sum < target) {\n                    left++;\n                } else if (sum > target) {\n                    right--;\n                } else {\n                    // Found a triplet\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    \n                    // Skip duplicates\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    \n                    left++;\n                    right--;\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                List<List<Integer>> result = sol.threeSum(nums);\n                /*RUNTIME CALC END*/\n                \n                // Print results\n                if (result.isEmpty()) {\n                    System.out.println(\"No triplets found\");\n                } else {\n                    for (List<Integer> triplet : result) {\n                        System.out.print(\"[\");\n                        for (int j = 0; j < triplet.size(); j++) {\n                            System.out.print(triplet.get(j));\n                            if (j < triplet.size() - 1) {\n                                System.out.print(\",\");\n                            }\n                        }\n                        System.out.println(\"]\");\n                    }\n                }\n                \n                if (i < t - 1) {\n                    System.out.println();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "name": "cpp",
      "version": "17",
      "boilerplateCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> threeSum(std::vector<int>& nums) {\n        // Your code here\n        return {}; // Replace with your implementation\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n\n    for (int i = 0; i < t; ++i) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<std::vector<int>> result = sol.threeSum(nums);\n        /*RUNTIME CALC END*/\n        \n        // Print results\n        if (result.empty()) {\n            std::cout << \"No triplets found\";\n        } else {\n            for (const auto& triplet : result) {\n                std::cout << \"[\";\n                for (size_t j = 0; j < triplet.size(); ++j) {\n                    std::cout << triplet[j];\n                    if (j < triplet.size() - 1) {\n                        std::cout << \",\";\n                    }\n                }\n                std::cout << \"]\\n\";\n            }\n        }\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}",
      "solutionCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> threeSum(std::vector<int>& nums) {\n        std::vector<std::vector<int>> result;\n        if (nums.size() < 3) {\n            return result;\n        }\n        \n        // Sort the array to handle duplicates and use two-pointer approach\n        std::sort(nums.begin(), nums.end());\n        \n        for (int i = 0; i < nums.size() - 2; i++) {\n            // Skip duplicate values for i\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            \n            int target = -nums[i];\n            int left = i + 1;\n            int right = nums.size() - 1;\n            \n            while (left < right) {\n                int sum = nums[left] + nums[right];\n                \n                if (sum < target) {\n                    left++;\n                } else if (sum > target) {\n                    right--;\n                } else {\n                    // Found a triplet\n                    result.push_back({nums[i], nums[left], nums[right]});\n                    \n                    // Skip duplicates\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    \n                    left++;\n                    right--;\n                }\n            }\n        }\n        \n        return result;\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n\n    for (int i = 0; i < t; ++i) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<std::vector<int>> result = sol.threeSum(nums);\n        /*RUNTIME CALC END*/\n        \n        // Print results\n        if (result.empty()) {\n            std::cout << \"No triplets found\";\n        } else {\n            for (const auto& triplet : result) {\n                std::cout << \"[\";\n                for (size_t j = 0; j < triplet.size(); ++j) {\n                    std::cout << triplet[j];\n                    if (j < triplet.size() - 1) {\n                        std::cout << \",\";\n                    }\n                }\n                std::cout << \"]\\n\";\n            }\n        }\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}"
    },
    {
      "name": "python",
      "version": "3.9.0",
      "boilerplateCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        # Your code here\n        return [] # Replace with your implementation\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.threeSum(nums)\n                # RUNTIME CALC END\n                \n                # Print results\n                if not result:\n                    print(\"No triplets found\")\n                else:\n                    for triplet in result:\n                        print(f\"[{','.join(map(str, triplet))})]\") \n                \n                if _ < t - 1:\n                    print()\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()",
      "solutionCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        if len(nums) < 3:\n            return result\n        \n        # Sort the array to handle duplicates and use two-pointer approach\n        nums.sort()\n        \n        for i in range(len(nums) - 2):\n            # Skip duplicate values for i\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            target = -nums[i]\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum_val = nums[left] + nums[right]\n                \n                if sum_val < target:\n                    left += 1\n                elif sum_val > target:\n                    right -= 1\n                else:\n                    # Found a triplet\n                    result.append([nums[i], nums[left], nums[right]])\n                    \n                    # Skip duplicates\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    \n                    left += 1\n                    right -= 1\n        \n        return result\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.threeSum(nums)\n                # RUNTIME CALC END\n                \n                # Print results\n                if not result:\n                    print(\"No triplets found\")\n                else:\n                    for triplet in result:\n                        print(f\"[{','.join(map(str, triplet))}]\") \n                \n                if _ < t - 1:\n                    print()\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()"
    }
  ],
  "defaultLanguage": "java",
  "testCases": [
    {
      "input": "3\n[-1,0,1,2,-1,-4]\n[0,1,1]\n[0,0,0]",
      "output": "[-1,-1,2]\n[-1,0,1]\n\nNo triplets found\n\n[0,0,0]",
      "hidden": false,
      "explanation": "Combined test cases with multiple triplets, no triplets, and all zeroes"
    },
    {
      "input": "3\n[-2,0,0,2,2]\n[1,-1,-1,0]\n[-4,2,2,2,2,2,2,3,-1,-1,-5,-5,-5]",
      "output": "[-2,0,2]\n\n[-1,0,1]\n\n[-5,2,3]\n[-4,2,2]\n[-1,-1,2]",
      "hidden": true,
      "explanation": "Additional test cases with duplicates and multiple solutions"
    }
  ]
} 