{
  "title": "Two Sum",
  "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\nInput Format:\n- The first line contains a single integer T, the number of test cases.\n- For each test case:\n  - The first line contains an array of integers in the format [x1,x2,...,xn].\n  - The second line contains the target sum.\n\nOutput Format:\n- For each test case, print a single array containing the indices of the two numbers that add up to the target.",
  "constraints": {
    "timeLimit": 1000,
    "memoryLimit": 256
  },
  "constraintsDesc": [
    "2 <= nums.length <= 10^4",
    "-10^9 <= nums[i] <= 10^9",
    "-10^9 <= target <= 10^9",
    "Only one valid answer exists"
  ],
  "examples": [
    {
      "input": "5\n[2,7,11,15]\n9\n[3,2,4]\n6\n[1,3,4,2]\n6\n[-1,-2,-3,-4,-5]\n-8\n[0,4,3,0]\n0",
      "output": "[0,1]\n[1,2]\n[2,3]\n[2,4]\n[0,3]",
      "explanation": "Test case 1: nums[0] + nums[1] = 2 + 7 = 9\nTest case 2: nums[1] + nums[2] = 2 + 4 = 6\nTest case 3: nums[2] + nums[3] = 4 + 2 = 6\nTest case 4: nums[2] + nums[4] = -3 + (-5) = -8\nTest case 5: nums[0] + nums[3] = 0 + 0 = 0"
    }
  ],
  "type": "programming",
  "difficultyLevel": "easy",
  "marks": 5,
  "tags": ["Arrays", "Hash Table"],
  "maintag": "Data Structures & Algorithms",
  "companies": ["Amazon", "Google", "Apple", "Microsoft", "Facebook", "Adobe", "Bloomberg", "Uber"],
  "hints": [
    "A brute force approach would be to check all pairs of numbers, but that would be O(nÂ²)",
    "Can you use a hash map to reduce the time complexity?",
    "For each number, check if the complement (target - current number) exists in the hash map"
  ],
  "languages": [
    {
      "name": "java",
      "version": "15.0.2",
      "boilerplateCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Finds indices of two numbers that add up to the target.\n     * @param nums The input array of integers.\n     * @param target The target sum.\n     * @return An array of two integers representing the indices.\n     */\n    public int[] twoSum(int[] nums, int target) {\n        // Implement your solution here\n        return new int[]{0, 0}; // Replace with your implementation\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                // Read target\n                int target = Integer.parseInt(br.readLine().trim());\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int[] result = sol.twoSum(nums, target);\n                /*RUNTIME CALC END*/\n                \n                // Format output\n                output.append(\"[\").append(result[0]).append(\",\").append(result[1]).append(\"]\");\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
      "solutionCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Finds indices of two numbers that add up to the target.\n     * @param nums The input array of integers.\n     * @param target The target sum.\n     * @return An array of two integers representing the indices.\n     */\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] {map.get(complement), i};\n            }\n            map.put(nums[i], i);\n        }\n        \n        // In case there is no solution (should not happen based on problem constraints)\n        return new int[]{-1, -1};\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                // Read target\n                int target = Integer.parseInt(br.readLine().trim());\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int[] result = sol.twoSum(nums, target);\n                /*RUNTIME CALC END*/\n                \n                // Format output\n                output.append(\"[\").append(result[0]).append(\",\").append(result[1]).append(\"]\");\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "name": "cpp",
      "version": "17",
      "boilerplateCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <sstream>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        // Your code here\n        return {0, 0};  // Replace with your implementation\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore();\n\n    for (int i = 0; i < t; ++i) {\n        // Parse input array\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        // Parse target\n        int target;\n        std::cin >> target;\n        std::cin.ignore();\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<int> result = sol.twoSum(nums, target);\n        /*RUNTIME CALC END*/\n        \n        // Print output\n        std::cout << \"[\" << result[0] << \",\" << result[1] << \"]\";\n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}",
      "solutionCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <sstream>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> map;\n        \n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            \n            if (map.find(complement) != map.end()) {\n                return {map[complement], i};\n            }\n            \n            map[nums[i]] = i;\n        }\n        \n        // Should not reach here given problem constraints\n        return {-1, -1};\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore();\n\n    for (int i = 0; i < t; ++i) {\n        // Parse input array\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        // Parse target\n        int target;\n        std::cin >> target;\n        std::cin.ignore();\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<int> result = sol.twoSum(nums, target);\n        /*RUNTIME CALC END*/\n        \n        // Print output\n        std::cout << \"[\" << result[0] << \",\" << result[1] << \"]\";\n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}"
    },
    {
      "name": "python",
      "version": "3.9.0",
      "boilerplateCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Your code here\n        return [0, 0]  # Replace with your implementation\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            results = []\n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # Read target\n                target = int(input().strip())\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.twoSum(nums, target)\n                # RUNTIME CALC END\n                \n                results.append(f\"[{result[0]},{result[1]}]\")\n            \n            # Output all results\n            print('\\n'.join(results))\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()",
      "solutionCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Using a dictionary to store value->index mapping\n        num_map = {}\n        \n        for i, num in enumerate(nums):\n            complement = target - num\n            \n            if complement in num_map:\n                return [num_map[complement], i]\n            \n            num_map[num] = i\n            \n        # Should not reach here given problem constraints\n        return [-1, -1]\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            results = []\n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # Read target\n                target = int(input().strip())\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.twoSum(nums, target)\n                # RUNTIME CALC END\n                \n                results.append(f\"[{result[0]},{result[1]}]\")\n            \n            # Output all results\n            print('\\n'.join(results))\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()"
    }
  ],
  "defaultLanguage": "java",
  "testCases": [
    {
      "input": "5\n[2,7,11,15]\n9\n[3,2,4]\n6\n[1,3,4,2]\n6\n[-1,-2,-3,-4,-5]\n-8\n[0,4,3,0]\n0",
      "output": "[0,1]\n[1,2]\n[2,3]\n[2,4]\n[0,3]",
      "hidden": false,
      "explanation": "Combined test cases with various scenarios including positive, negative, and duplicate numbers"
    }
  ]
} 