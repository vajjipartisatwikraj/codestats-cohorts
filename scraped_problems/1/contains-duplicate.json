{
  "title": "Contains Duplicate",
  "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n\nInput Format:\n- The first line contains a single integer T, the number of test cases.\n- For each test case:\n  - A single line containing an array of integers in the format [x1,x2,...,xn].\n\nOutput Format:\n- For each test case, print \"true\" if the array contains duplicate elements, otherwise print \"false\".",
  "constraints": {
    "timeLimit": 1000,
    "memoryLimit": 256
  },
  "constraintsDesc": [
    "1 <= nums.length <= 10^5",
    "-10^9 <= nums[i] <= 10^9"
  ],
  "examples": [
    {
      "input": "4\n[1,2,3,1]\n[1,2,3,4]\n[1,1,1,3,3,4,3,2,4,2]\n[0]",
      "output": "true\nfalse\ntrue\nfalse",
      "explanation": "Test case 1: The value 1 appears twice in the array.\nTest case 2: Every element appears once, so there are no duplicates.\nTest case 3: Both values 1, 2, 3, and 4 appear multiple times.\nTest case 4: There's only one element, so no duplicates."
    }
  ],
  "type": "programming",
  "difficultyLevel": "easy",
  "marks": 5,
  "tags": ["Array", "Hash Table", "Sorting"],
  "maintag": "Data Structures & Algorithms",
  "companies": ["Amazon", "Microsoft", "Apple", "Google", "Facebook", "Adobe", "Oracle"],
  "hints": [
    "You can use a set or hash table to check for duplicates efficiently",
    "An alternative approach is to sort the array and check neighboring elements",
    "Think about time and space tradeoffs between different approaches"
  ],
  "languages": [
    {
      "name": "java",
      "version": "15.0.2",
      "boilerplateCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Checks if the array contains any duplicate elements.\n     * @param nums The input array of integers.\n     * @return true if the array contains duplicates, false otherwise.\n     */\n    public boolean containsDuplicate(int[] nums) {\n        // Implement your solution here\n        return false; // Replace with your implementation\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                boolean result = sol.containsDuplicate(nums);\n                /*RUNTIME CALC END*/\n                \n                output.append(result);\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
      "solutionCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Checks if the array contains any duplicate elements.\n     * @param nums The input array of integers.\n     * @return true if the array contains duplicates, false otherwise.\n     */\n    public boolean containsDuplicate(int[] nums) {\n        // Using a HashSet to track seen elements\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : nums) {\n            // If num already exists in the set, it's a duplicate\n            if (seen.contains(num)) {\n                return true;\n            }\n            \n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        // No duplicates found\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                boolean result = sol.containsDuplicate(nums);\n                /*RUNTIME CALC END*/\n                \n                output.append(result);\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "name": "cpp",
      "version": "17",
      "boilerplateCode": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool containsDuplicate(std::vector<int>& nums) {\n        // Your code here\n        return false; // Replace with your implementation\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n\n    for (int i = 0; i < t; ++i) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        bool result = sol.containsDuplicate(nums);\n        /*RUNTIME CALC END*/\n        \n        std::cout << (result ? \"true\" : \"false\");\n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}",
      "solutionCode": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool containsDuplicate(std::vector<int>& nums) {\n        // Using an unordered_set to track seen elements\n        std::unordered_set<int> seen;\n        \n        for (int num : nums) {\n            // If num already exists in the set, it's a duplicate\n            if (seen.count(num) > 0) {\n                return true;\n            }\n            \n            // Add the current number to the set\n            seen.insert(num);\n        }\n        \n        // No duplicates found\n        return false;\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n\n    for (int i = 0; i < t; ++i) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        bool result = sol.containsDuplicate(nums);\n        /*RUNTIME CALC END*/\n        \n        std::cout << (result ? \"true\" : \"false\");\n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}"
    },
    {
      "name": "python",
      "version": "3.9.0",
      "boilerplateCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        # Your code here\n        return False # Replace with your implementation\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            results = []\n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.containsDuplicate(nums)\n                # RUNTIME CALC END\n                \n                results.append(str(result).lower())\n            \n            # Output all results\n            print('\\n'.join(results))\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()",
      "solutionCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        # Using a set to track seen elements\n        seen = set()\n        \n        for num in nums:\n            # If num already exists in the set, it's a duplicate\n            if num in seen:\n                return True\n            \n            # Add the current number to the set\n            seen.add(num)\n        \n        # No duplicates found\n        return False\n        \n        # Alternative one-liner solution using set\n        # return len(set(nums)) < len(nums)\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            results = []\n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.containsDuplicate(nums)\n                # RUNTIME CALC END\n                \n                results.append(str(result).lower())\n            \n            # Output all results\n            print('\\n'.join(results))\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()"
    }
  ],
  "defaultLanguage": "java",
  "testCases": [
    {
      "input": "4\n[1,2,3,1]\n[1,2,3,4]\n[1,1,1,3,3,4,3,2,4,2]\n[0]",
      "output": "true\nfalse\ntrue\nfalse",
      "hidden": false,
      "explanation": "Combined test cases with arrays containing duplicates and arrays with distinct elements"
    },
    {
      "input": "3\n[]\n[-1,-1]\n[2147483647,2147483647]",
      "output": "false\ntrue\ntrue",
      "hidden": true,
      "explanation": "Edge cases including empty array and arrays with duplicate extreme values"
    }
  ]
} 