{
  "title": "Product of Array Except Self",
  "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe algorithm should run in O(n) time and without using the division operation.\n\nInput Format:\n- The first line contains a single integer T, the number of test cases.\n- For each test case:\n  - A single line containing an array of integers in the format [x1,x2,...,xn].\n\nOutput Format:\n- For each test case, print an array containing the product of all elements except self.",
  "constraints": {
    "timeLimit": 1000,
    "memoryLimit": 256
  },
  "constraintsDesc": [
    "2 <= nums.length <= 10^5",
    "-30 <= nums[i] <= 30",
    "The product of any subset of nums does not exceed 10^8"
  ],
  "examples": [
    {
      "input": "2\n[1,2,3,4]\n[-1,1,0,-3,3]",
      "output": "[24,12,8,6]\n[0,0,-9,0,0]",
      "explanation": "Test case 1: For the array [1,2,3,4]:\nresult[0] = 2 * 3 * 4 = 24\nresult[1] = 1 * 3 * 4 = 12\nresult[2] = 1 * 2 * 4 = 8\nresult[3] = 1 * 2 * 3 = 6\n\nTest case 2: For the array [-1,1,0,-3,3]:\nresult[0] = 1 * 0 * -3 * 3 = 0\nresult[1] = -1 * 0 * -3 * 3 = 0\nresult[2] = -1 * 1 * -3 * 3 = -9\nresult[3] = -1 * 1 * 0 * 3 = 0\nresult[4] = -1 * 1 * 0 * -3 = 0"
    }
  ],
  "type": "programming",
  "difficultyLevel": "medium",
  "marks": 10,
  "tags": ["Array", "Prefix Sum"],
  "maintag": "Data Structures & Algorithms",
  "companies": ["Amazon", "Microsoft", "Facebook", "Apple", "Bloomberg", "LinkedIn"],
  "hints": [
    "Can you use two passes through the array to solve this?",
    "Consider using prefix and suffix products",
    "In the first pass, calculate the product of all elements to the left of each element",
    "In the second pass, calculate the product of all elements to the right and combine with the left products"
  ],
  "languages": [
    {
      "name": "java",
      "version": "15.0.2",
      "boilerplateCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Returns an array where each element is the product of all elements except self.\n     * @param nums The input array of integers.\n     * @return An array where each element is the product of all elements except self.\n     */\n    public int[] productExceptSelf(int[] nums) {\n        // Implement your solution here\n        // Do not use division and solve in O(n) time\n        return new int[nums.length]; // Replace with your implementation\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int[] result = sol.productExceptSelf(nums);\n                /*RUNTIME CALC END*/\n                \n                // Format output\n                output.append(\"[\");\n                for (int j = 0; j < result.length; j++) {\n                    output.append(result[j]);\n                    if (j < result.length - 1) {\n                        output.append(\",\");\n                    }\n                }\n                output.append(\"]\");\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
      "solutionCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Returns an array where each element is the product of all elements except self.\n     * @param nums The input array of integers.\n     * @return An array where each element is the product of all elements except self.\n     */\n    public int[] productExceptSelf(int[] nums) {\n        int n = nums.length;\n        int[] result = new int[n];\n        \n        // Initialize result array with 1s\n        Arrays.fill(result, 1);\n        \n        // Calculate products of all elements to the left of each element\n        int leftProduct = 1;\n        for (int i = 0; i < n; i++) {\n            result[i] *= leftProduct;\n            leftProduct *= nums[i];\n        }\n        \n        // Calculate products of all elements to the right and multiply with left products\n        int rightProduct = 1;\n        for (int i = n - 1; i >= 0; i--) {\n            result[i] *= rightProduct;\n            rightProduct *= nums[i];\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim()); // Read number of test cases\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                // Parse the array\n                String line = br.readLine().trim();\n                int[] nums;\n                if (line.length() <= 2) { // [], [, ] or empty string\n                    nums = new int[0];\n                } else {\n                    // Remove brackets\n                    String content = line.substring(1, line.length() - 1).trim();\n                    String[] strNums = content.split(\",\");\n                    nums = new int[strNums.length];\n                    for (int j = 0; j < strNums.length; j++) {\n                        nums[j] = Integer.parseInt(strNums[j].trim());\n                    }\n                }\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int[] result = sol.productExceptSelf(nums);\n                /*RUNTIME CALC END*/\n                \n                // Format output\n                output.append(\"[\");\n                for (int j = 0; j < result.length; j++) {\n                    output.append(result[j]);\n                    if (j < result.length - 1) {\n                        output.append(\",\");\n                    }\n                }\n                output.append(\"]\");\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "name": "cpp",
      "version": "17",
      "boilerplateCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        // Your code here\n        // Do not use division and solve in O(n) time\n        return std::vector<int>(nums.size(), 0); // Replace with your implementation\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n\n    for (int i = 0; i < t; ++i) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<int> result = sol.productExceptSelf(nums);\n        /*RUNTIME CALC END*/\n        \n        // Format output\n        std::cout << \"[\";\n        for (size_t j = 0; j < result.size(); ++j) {\n            std::cout << result[j];\n            if (j < result.size() - 1) {\n                std::cout << \",\";\n            }\n        }\n        std::cout << \"]\";\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}",
      "solutionCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        int n = nums.size();\n        std::vector<int> result(n, 1);\n        \n        // Calculate products of all elements to the left of each element\n        int leftProduct = 1;\n        for (int i = 0; i < n; i++) {\n            result[i] *= leftProduct;\n            leftProduct *= nums[i];\n        }\n        \n        // Calculate products of all elements to the right and multiply with left products\n        int rightProduct = 1;\n        for (int i = n - 1; i >= 0; i--) {\n            result[i] *= rightProduct;\n            rightProduct *= nums[i];\n        }\n        \n        return result;\n    }\n};\n\n// Helper function to parse array from string\nstd::vector<int> parseArray(const std::string& str) {\n    std::vector<int> result;\n    std::string num;\n    for (char ch : str) {\n        if ((ch >= '0' && ch <= '9') || ch == '-') {\n            num += ch;\n        } else if (!num.empty()) {\n            result.push_back(std::stoi(num));\n            num.clear();\n        }\n    }\n    if (!num.empty()) {\n        result.push_back(std::stoi(num));\n    }\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n\n    for (int i = 0; i < t; ++i) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::vector<int> nums = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<int> result = sol.productExceptSelf(nums);\n        /*RUNTIME CALC END*/\n        \n        // Format output\n        std::cout << \"[\";\n        for (size_t j = 0; j < result.size(); ++j) {\n            std::cout << result[j];\n            if (j < result.size() - 1) {\n                std::cout << \",\";\n            }\n        }\n        std::cout << \"]\";\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}"
    },
    {
      "name": "python",
      "version": "3.9.0",
      "boilerplateCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        # Your code here\n        # Do not use division and solve in O(n) time\n        return [0] * len(nums) # Replace with your implementation\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            results = []\n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.productExceptSelf(nums)\n                # RUNTIME CALC END\n                \n                # Format output\n                results.append(f\"[{','.join(map(str, result))}]\")\n            \n            # Output all results\n            print('\\n'.join(results))\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()",
      "solutionCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        result = [1] * n\n        \n        # Calculate products of all elements to the left of each element\n        left_product = 1\n        for i in range(n):\n            result[i] *= left_product\n            left_product *= nums[i]\n        \n        # Calculate products of all elements to the right and multiply with left products\n        right_product = 1\n        for i in range(n - 1, -1, -1):\n            result[i] *= right_product\n            right_product *= nums[i]\n        \n        return result\n\nclass Main:\n    @staticmethod\n    def main():\n        try:\n            # Read number of test cases\n            t = int(input().strip())\n            \n            results = []\n            for _ in range(t):\n                # Parse the array\n                line = input().strip()\n                if line in [\"[]\", \"[\", \"]\", \"\"]:\n                    nums = []\n                else:\n                    # Remove brackets and split by comma\n                    content = line[1:-1].strip()\n                    nums = [int(x.strip()) for x in content.split(',')]\n                \n                # RUNTIME CALC START\n                sol = Solution()\n                result = sol.productExceptSelf(nums)\n                # RUNTIME CALC END\n                \n                # Format output\n                results.append(f\"[{','.join(map(str, result))}]\")\n            \n            # Output all results\n            print('\\n'.join(results))\n        except Exception as e:\n            print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    Main.main()"
    }
  ],
  "defaultLanguage": "java",
  "testCases": [
    {
      "input": "2\n[1,2,3,4]\n[-1,1,0,-3,3]",
      "output": "[24,12,8,6]\n[0,0,-9,0,0]",
      "hidden": false,
      "explanation": "Combined test cases with positive integers and mixed integers including zero"
    },
    {
      "input": "3\n[2,3,4,5]\n[0,0]\n[-2,-3,-4]",
      "output": "[60,40,30,24]\n[0,0]\n[12,8,6]",
      "hidden": true,
      "explanation": "Edge cases including all positive, multiple zeros, and all negative numbers"
    }
  ]
} 