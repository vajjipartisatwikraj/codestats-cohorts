{
  "id": "binary-tree-right-side-view",
  "title": "Binary Tree Right Side View",
  "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
  "difficulty": "Medium",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 100].",
    "-100 <= Node.val <= 100"
  ],
  "examples": [
    {
      "input": "root = [1,2,3,null,5,null,4]",
      "output": "[1,3,4]",
      "explanation": "The right side view of the binary tree is [1,3,4]. From the right side, you can see nodes at each level that are rightmost in their level."
    },
    {
      "input": "root = [1,null,3]",
      "output": "[1,3]",
      "explanation": "From the right side, you can see both nodes 1 and 3."
    },
    {
      "input": "root = []",
      "output": "[]",
      "explanation": "The tree is empty."
    }
  ],
  "approach": "The right side view of a binary tree includes the rightmost node at each level of the tree. We can use a breadth-first search (BFS) approach to traverse the tree level by level. For each level, we add the last node's value to the result. Alternatively, we can use a depth-first search (DFS) approach with a pre-order traversal (root, right, left) to prioritize the rightmost branches, and keep track of the maximum depth we've seen so far. When we encounter a node at a depth greater than the maximum depth seen, it means this is the first (rightmost) node at this level, so we add it to the result.",
  "boilerplateCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        // Your code here\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        # Your code here\n        pass",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        // Your code here\n    }\n};"
  },
  "solutionCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // BFS approach\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            int levelSize = queue.size();\n            \n            for (int i = 0; i < levelSize; i++) {\n                TreeNode current = queue.poll();\n                \n                // If this is the last node in the current level, add it to result\n                if (i == levelSize - 1) {\n                    result.add(current.val);\n                }\n                \n                // Add child nodes to the queue for the next level\n                if (current.left != null) {\n                    queue.offer(current.left);\n                }\n                if (current.right != null) {\n                    queue.offer(current.right);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    // Alternative DFS approach\n    /*\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        rightView(root, result, 0);\n        return result;\n    }\n    \n    private void rightView(TreeNode node, List<Integer> result, int currentDepth) {\n        if (node == null) {\n            return;\n        }\n        \n        // If this is the first node we've seen at this depth,\n        // add it to the result\n        if (currentDepth == result.size()) {\n            result.add(node.val);\n        }\n        \n        // Try to go as far right as possible first\n        rightView(node.right, result, currentDepth + 1);\n        rightView(node.left, result, currentDepth + 1);\n    }\n    */\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # BFS approach\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        result = []\n        queue = collections.deque([root])\n        \n        while queue:\n            level_size = len(queue)\n            \n            for i in range(level_size):\n                current = queue.popleft()\n                \n                # If this is the last node in the current level, add it to result\n                if i == level_size - 1:\n                    result.append(current.val)\n                \n                # Add child nodes to the queue for the next level\n                if current.left:\n                    queue.append(current.left)\n                if current.right:\n                    queue.append(current.right)\n        \n        return result\n    \n    # Alternative DFS approach\n    \"\"\"\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        result = []\n        \n        def right_view(node, depth):\n            if not node:\n                return\n            \n            # If this is the first node we've seen at this depth,\n            # add it to the result\n            if depth == len(result):\n                result.append(node.val)\n            \n            # Try to go as far right as possible first\n            right_view(node.right, depth + 1)\n            right_view(node.left, depth + 1)\n        \n        right_view(root, 0)\n        return result\n    \"\"\"",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // BFS approach\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> result;\n        if (!root) {\n            return result;\n        }\n        \n        queue<TreeNode*> q;\n        q.push(root);\n        \n        while (!q.empty()) {\n            int levelSize = q.size();\n            \n            for (int i = 0; i < levelSize; i++) {\n                TreeNode* current = q.front();\n                q.pop();\n                \n                // If this is the last node in the current level, add it to result\n                if (i == levelSize - 1) {\n                    result.push_back(current->val);\n                }\n                \n                // Add child nodes to the queue for the next level\n                if (current->left) {\n                    q.push(current->left);\n                }\n                if (current->right) {\n                    q.push(current->right);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    // Alternative DFS approach\n    /*\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> result;\n        rightView(root, result, 0);\n        return result;\n    }\n    \n    void rightView(TreeNode* node, vector<int>& result, int currentDepth) {\n        if (!node) {\n            return;\n        }\n        \n        // If this is the first node we've seen at this depth,\n        // add it to the result\n        if (currentDepth == result.size()) {\n            result.push_back(node->val);\n        }\n        \n        // Try to go as far right as possible first\n        rightView(node->right, result, currentDepth + 1);\n        rightView(node->left, result, currentDepth + 1);\n    }\n    */\n};"
  },
  "testCases": {
    "visible": [
      {
        "input": {"root": [1,2,3,null,5,null,4]},
        "output": [1,3,4]
      },
      {
        "input": {"root": [1,null,3]},
        "output": [1,3]
      },
      {
        "input": {"root": []},
        "output": []
      }
    ],
    "hidden": [
      {
        "input": {"root": [1,2]},
        "output": [1,2]
      },
      {
        "input": {"root": [1,2,3,4]},
        "output": [1,3,4]
      },
      {
        "input": {"root": [1,2,3,null,5,null,4,null,null,7]},
        "output": [1,3,4,7]
      }
    ]
  },
  "hints": [
    "Try using a breadth-first search (BFS) to traverse the tree level by level.",
    "For each level, the rightmost node is part of the right side view.",
    "Alternatively, consider a depth-first search (DFS) approach that prioritizes the right subtree.",
    "Keep track of the current depth during the traversal to identify the first (rightmost) node at each level."
  ],
  "companies": ["Facebook", "Amazon", "Microsoft", "Bloomberg", "Google"],
  "tags": ["Tree", "Breadth-First Search", "Depth-First Search", "Binary Tree"],
  "timeComplexity": "O(n) - We need to visit each node once, where n is the number of nodes in the tree.",
  "spaceComplexity": "O(d) - The maximum number of nodes in the queue at any point is the maximum width of the tree, which is at most O(n/2) for a balanced tree at the lowest level. In the DFS approach, the space complexity is O(h) for the recursion stack, where h is the height of the tree."
} 