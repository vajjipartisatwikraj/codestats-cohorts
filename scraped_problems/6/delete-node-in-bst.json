{
  "id": "delete-node-in-bst",
  "title": "Delete Node in a BST",
  "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n\nBasically, the deletion can be divided into two stages:\n1. Search for a node to remove.\n2. If the node is found, delete the node.\n\nFollow up: Can you solve it with time complexity O(height of tree)?",
  "difficulty": "Medium",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 10^4]",
    "-10^5 <= Node.val <= 10^5",
    "Each node has a unique value",
    "root is a valid binary search tree",
    "-10^5 <= key <= 10^5"
  ],
  "examples": [
    {
      "input": "root = [5,3,6,2,4,null,7], key = 3",
      "output": "[5,4,6,2,null,null,7]",
      "explanation": "Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the example diagram.\nAnother valid answer is [5,2,6,null,4,null,7]."
    },
    {
      "input": "root = [5,3,6,2,4,null,7], key = 0",
      "output": "[5,3,6,2,4,null,7]",
      "explanation": "The tree does not contain a node with value = 0."
    },
    {
      "input": "root = [], key = 0",
      "output": "[]",
      "explanation": "The tree is empty."
    }
  ],
  "approach": "To delete a node from a BST while maintaining its properties, we need to handle several cases:\n1. If the node to be deleted is a leaf node, we can simply remove it.\n2. If the node has only one child, we can replace it with its child.\n3. If the node has two children, we need to find the node's in-order successor (smallest value in its right subtree) or predecessor (largest value in its left subtree), replace the node's value with the successor/predecessor's value, and then delete the successor/predecessor.\n\nThe time complexity for this operation is O(h), where h is the height of the tree.",
  "boilerplateCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        // Your code here\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        # Your code here\n        pass",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        // Your code here\n    }\n};"
  },
  "solutionCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) {\n            return null;\n        }\n        \n        // Search for the node to be deleted\n        if (key < root.val) {\n            // Key is in the left subtree\n            root.left = deleteNode(root.left, key);\n        } else if (key > root.val) {\n            // Key is in the right subtree\n            root.right = deleteNode(root.right, key);\n        } else {\n            // Found the node to be deleted\n            \n            // Case 1: Node is a leaf (no children)\n            if (root.left == null && root.right == null) {\n                return null;\n            }\n            \n            // Case 2: Node has only one child\n            if (root.left == null) {\n                return root.right;\n            }\n            if (root.right == null) {\n                return root.left;\n            }\n            \n            // Case 3: Node has two children\n            // Find the inorder successor (smallest value in right subtree)\n            root.val = findMin(root.right).val;\n            \n            // Delete the inorder successor\n            root.right = deleteNode(root.right, root.val);\n        }\n        \n        return root;\n    }\n    \n    private TreeNode findMin(TreeNode node) {\n        while (node.left != null) {\n            node = node.left;\n        }\n        return node;\n    }\n    \n    // Alternative implementation using inorder predecessor\n    public TreeNode deleteNodeAlt(TreeNode root, int key) {\n        if (root == null) {\n            return null;\n        }\n        \n        // Search for the node to be deleted\n        if (key < root.val) {\n            root.left = deleteNodeAlt(root.left, key);\n        } else if (key > root.val) {\n            root.right = deleteNodeAlt(root.right, key);\n        } else {\n            // Found the node to be deleted\n            \n            // Node with only one child or no child\n            if (root.left == null) {\n                return root.right;\n            } else if (root.right == null) {\n                return root.left;\n            }\n            \n            // Node with two children\n            // Find the inorder predecessor (largest value in left subtree)\n            TreeNode predecessor = findMax(root.left);\n            root.val = predecessor.val;\n            \n            // Delete the inorder predecessor\n            root.left = deleteNodeAlt(root.left, predecessor.val);\n        }\n        \n        return root;\n    }\n    \n    private TreeNode findMax(TreeNode node) {\n        while (node.right != null) {\n            node = node.right;\n        }\n        return node;\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        if not root:\n            return None\n        \n        # Search for the node to be deleted\n        if key < root.val:\n            # Key is in the left subtree\n            root.left = self.deleteNode(root.left, key)\n        elif key > root.val:\n            # Key is in the right subtree\n            root.right = self.deleteNode(root.right, key)\n        else:\n            # Found the node to be deleted\n            \n            # Case 1: Node is a leaf (no children)\n            if not root.left and not root.right:\n                return None\n            \n            # Case 2: Node has only one child\n            if not root.left:\n                return root.right\n            if not root.right:\n                return root.left\n            \n            # Case 3: Node has two children\n            # Find the inorder successor (smallest value in right subtree)\n            successor = self.find_min(root.right)\n            root.val = successor.val\n            \n            # Delete the inorder successor\n            root.right = self.deleteNode(root.right, successor.val)\n        \n        return root\n    \n    def find_min(self, node):\n        while node.left:\n            node = node.left\n        return node\n    \n    # Alternative implementation using inorder predecessor\n    def deleteNodeAlt(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        if not root:\n            return None\n        \n        # Search for the node to be deleted\n        if key < root.val:\n            root.left = self.deleteNodeAlt(root.left, key)\n        elif key > root.val:\n            root.right = self.deleteNodeAlt(root.right, key)\n        else:\n            # Found the node to be deleted\n            \n            # Node with only one child or no child\n            if not root.left:\n                return root.right\n            elif not root.right:\n                return root.left\n            \n            # Node with two children\n            # Find the inorder predecessor (largest value in left subtree)\n            predecessor = self.find_max(root.left)\n            root.val = predecessor.val\n            \n            # Delete the inorder predecessor\n            root.left = self.deleteNodeAlt(root.left, predecessor.val)\n        \n        return root\n    \n    def find_max(self, node):\n        while node.right:\n            node = node.right\n        return node",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        \n        // Search for the node to be deleted\n        if (key < root->val) {\n            // Key is in the left subtree\n            root->left = deleteNode(root->left, key);\n        } else if (key > root->val) {\n            // Key is in the right subtree\n            root->right = deleteNode(root->right, key);\n        } else {\n            // Found the node to be deleted\n            \n            // Case 1: Node is a leaf (no children)\n            if (root->left == nullptr && root->right == nullptr) {\n                delete root;\n                return nullptr;\n            }\n            \n            // Case 2: Node has only one child\n            if (root->left == nullptr) {\n                TreeNode* temp = root->right;\n                delete root;\n                return temp;\n            }\n            if (root->right == nullptr) {\n                TreeNode* temp = root->left;\n                delete root;\n                return temp;\n            }\n            \n            // Case 3: Node has two children\n            // Find the inorder successor (smallest value in right subtree)\n            TreeNode* successor = findMin(root->right);\n            root->val = successor->val;\n            \n            // Delete the inorder successor\n            root->right = deleteNode(root->right, successor->val);\n        }\n        \n        return root;\n    }\n    \n    TreeNode* findMin(TreeNode* node) {\n        while (node->left != nullptr) {\n            node = node->left;\n        }\n        return node;\n    }\n    \n    // Alternative implementation using inorder predecessor\n    TreeNode* deleteNodeAlt(TreeNode* root, int key) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        \n        // Search for the node to be deleted\n        if (key < root->val) {\n            root->left = deleteNodeAlt(root->left, key);\n        } else if (key > root->val) {\n            root->right = deleteNodeAlt(root->right, key);\n        } else {\n            // Found the node to be deleted\n            \n            // Node with only one child or no child\n            if (root->left == nullptr) {\n                TreeNode* temp = root->right;\n                delete root;\n                return temp;\n            } else if (root->right == nullptr) {\n                TreeNode* temp = root->left;\n                delete root;\n                return temp;\n            }\n            \n            // Node with two children\n            // Find the inorder predecessor (largest value in left subtree)\n            TreeNode* predecessor = findMax(root->left);\n            root->val = predecessor->val;\n            \n            // Delete the inorder predecessor\n            root->left = deleteNodeAlt(root->left, predecessor->val);\n        }\n        \n        return root;\n    }\n    \n    TreeNode* findMax(TreeNode* node) {\n        while (node->right != nullptr) {\n            node = node->right;\n        }\n        return node;\n    }\n};"
  },
  "testCases": {
    "visible": [
      {
        "input": {"root": [5,3,6,2,4,null,7], "key": 3},
        "output": [5,4,6,2,null,null,7]
      },
      {
        "input": {"root": [5,3,6,2,4,null,7], "key": 0},
        "output": [5,3,6,2,4,null,7]
      },
      {
        "input": {"root": [], "key": 0},
        "output": []
      }
    ],
    "hidden": [
      {
        "input": {"root": [5,3,6,2,4,null,7], "key": 5},
        "output": [6,3,7,2,4]
      },
      {
        "input": {"root": [8,5,10,2,6,null,12], "key": 6},
        "output": [8,5,10,2,null,null,12]
      },
      {
        "input": {"root": [3,2,5,null,null,4,10,null,null,null,null,null,null,9], "key": 5},
        "output": [3,2,9,null,null,4,10]
      }
    ]
  },
  "hints": [
    "Think about the three cases for deleting a node: when it has no children, one child, or two children",
    "When deleting a node with no children, simply remove it from the tree",
    "When deleting a node with one child, replace the node with its child",
    "When deleting a node with two children, find its inorder successor (or predecessor) and replace the node's value with it, then delete the successor",
    "The inorder successor of a node is the node with the smallest value in its right subtree",
    "The inorder predecessor of a node is the node with the largest value in its left subtree"
  ],
  "companies": ["Amazon", "Microsoft", "Facebook", "Bloomberg", "LinkedIn"],
  "tags": ["Binary Search Tree", "Tree", "Binary Tree"],
  "timeComplexity": "O(h) - where h is the height of the tree. This is because we need to find the node to delete (which takes O(h) time in a BST) and then possibly find the inorder successor/predecessor (which also takes O(h) time).",
  "spaceComplexity": "O(h) - for the recursion stack, where h is the height of the tree."
} 