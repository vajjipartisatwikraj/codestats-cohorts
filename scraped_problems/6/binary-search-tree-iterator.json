{
  "id": "binary-search-tree-iterator",
  "title": "Binary Search Tree Iterator",
  "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\n- BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent node before the first call to next().\n- boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n- int next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent node, the first call to next() will return the smallest element in the BST.\n\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.",
  "difficulty": "Medium",
  "constraints": [
    "The number of nodes in the tree is in the range [1, 10^5]",
    "0 <= Node.val <= 10^6",
    "At most 10^5 calls will be made to hasNext and next"
  ],
  "examples": [
    {
      "input": "[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]",
      "output": "[null, 3, 7, true, 9, true, 15, true, 20, false]",
      "explanation": "BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False"
    }
  ],
  "approach": "To implement a BST iterator, we need to simulate an in-order traversal of the tree. One approach is to use a stack to keep track of nodes to visit. When initializing the iterator, we push all left nodes starting from the root into the stack. When next() is called, we pop the top node from the stack, push all its right child's left nodes into the stack, and return the popped node's value. The hasNext() method simply checks if the stack is empty. This approach ensures O(1) time complexity for hasNext() and amortized O(1) time complexity for next(), with O(h) space complexity where h is the height of the tree.",
  "boilerplateCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n\n    public BSTIterator(TreeNode root) {\n        // Your code here\n    }\n    \n    public int next() {\n        // Your code here\n    }\n    \n    public boolean hasNext() {\n        // Your code here\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        # Your code here\n        pass\n\n    def next(self) -> int:\n        # Your code here\n        pass\n\n    def hasNext(self) -> bool:\n        # Your code here\n        pass",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    BSTIterator(TreeNode* root) {\n        // Your code here\n    }\n    \n    int next() {\n        // Your code here\n    }\n    \n    bool hasNext() {\n        // Your code here\n    }\n};"
  },
  "solutionCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    private Stack<TreeNode> stack;\n    \n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        pushAllLeft(root);\n    }\n    \n    public int next() {\n        // Pop the next smallest element\n        TreeNode node = stack.pop();\n        \n        // If the node has a right child, push all left nodes of the right child\n        if (node.right != null) {\n            pushAllLeft(node.right);\n        }\n        \n        return node.val;\n    }\n    \n    public boolean hasNext() {\n        // Check if there are more nodes to traverse\n        return !stack.isEmpty();\n    }\n    \n    private void pushAllLeft(TreeNode node) {\n        // Push all left nodes into the stack\n        while (node != null) {\n            stack.push(node);\n            node = node.left;\n        }\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.stack = []\n        self._push_all_left(root)\n\n    def next(self) -> int:\n        # Pop the next smallest element\n        node = self.stack.pop()\n        \n        # If the node has a right child, push all left nodes of the right child\n        if node.right:\n            self._push_all_left(node.right)\n        \n        return node.val\n\n    def hasNext(self) -> bool:\n        # Check if there are more nodes to traverse\n        return len(self.stack) > 0\n    \n    def _push_all_left(self, node):\n        # Push all left nodes into the stack\n        while node:\n            self.stack.append(node)\n            node = node.left\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\nprivate:\n    std::stack<TreeNode*> stack;\n    \n    void pushAllLeft(TreeNode* node) {\n        // Push all left nodes into the stack\n        while (node != nullptr) {\n            stack.push(node);\n            node = node->left;\n        }\n    }\n    \npublic:\n    BSTIterator(TreeNode* root) {\n        pushAllLeft(root);\n    }\n    \n    int next() {\n        // Pop the next smallest element\n        TreeNode* node = stack.top();\n        stack.pop();\n        \n        // If the node has a right child, push all left nodes of the right child\n        if (node->right != nullptr) {\n            pushAllLeft(node->right);\n        }\n        \n        return node->val;\n    }\n    \n    bool hasNext() {\n        // Check if there are more nodes to traverse\n        return !stack.empty();\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */"
  },
  "testCases": {
    "visible": [
      {
        "input": {"operations": ["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"], "parameters": [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]},
        "output": [null, 3, 7, true, 9, true, 15, true, 20, false]
      }
    ],
    "hidden": [
      {
        "input": {"operations": ["BSTIterator", "hasNext", "next", "hasNext"], "parameters": [[[1]], [], [], []]},
        "output": [null, true, 1, false]
      },
      {
        "input": {"operations": ["BSTIterator", "next", "next", "next", "next", "next"], "parameters": [[[5, 3, 8, 2, 4, 6, 9]], [], [], [], [], []]},
        "output": [null, 2, 3, 4, 5, 6]
      }
    ]
  },
  "hints": [
    "Think about how to implement an in-order traversal of a binary search tree iteratively",
    "Use a stack to keep track of the nodes to visit next",
    "When initializing the iterator, push all left children of the root into the stack",
    "When next() is called, pop the top element, push all its right child's left children into the stack, and return the popped element's value",
    "The hasNext() method can simply check if the stack is empty"
  ],
  "companies": ["Microsoft", "Facebook", "Amazon", "Google", "LinkedIn", "Oracle"],
  "tags": ["Binary Search Tree", "Stack", "Tree", "Design", "Iterator", "Binary Tree"],
  "timeComplexity": "hasNext(): O(1) - Simply checks if the stack is empty. next(): Amortized O(1) - While each call might take O(h) in the worst case, the overall cost across n calls is O(n), making the amortized cost O(1) per call.",
  "spaceComplexity": "O(h) - In the worst case, the stack will contain all the nodes along a path from the root to the leftmost leaf, which is the height of the tree."
} 