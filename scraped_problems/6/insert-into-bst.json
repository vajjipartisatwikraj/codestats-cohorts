{
  "id": "insert-into-bst",
  "title": "Insert into a Binary Search Tree",
  "description": "You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\n\nNotice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.",
  "difficulty": "Medium",
  "constraints": [
    "The number of nodes in the tree will be in the range [0, 10^4]",
    "-10^8 <= Node.val <= 10^8",
    "All the values Node.val are unique",
    "-10^8 <= val <= 10^8",
    "It's guaranteed that val does not exist in the original BST"
  ],
  "examples": [
    {
      "input": "root = [4,2,7,1,3], val = 5",
      "output": "[4,2,7,1,3,5]",
      "explanation": "Another accepted tree is: [5,2,7,1,3,null,null,null,null,null,4]"
    },
    {
      "input": "root = [40,20,60,10,30,50,70], val = 25",
      "output": "[40,20,60,10,30,50,70,null,null,25]",
      "explanation": "The output is showing the BST after insertion in level order traversal."
    },
    {
      "input": "root = [4,2,7,1,3,null,null,null,null,null,null], val = 5",
      "output": "[4,2,7,1,3,5]",
      "explanation": "The BST is shown after insertion of node with value 5."
    }
  ],
  "approach": "To insert a value into a BST, we start at the root and traverse the tree based on the BST property: if the value to insert is less than the current node's value, we go to the left subtree; if it's greater, we go to the right subtree. We continue this process until we reach a null pointer, at which point we create a new node with the value and attach it to its parent. This approach maintains the BST property while ensuring the tree remains balanced. The time complexity is O(h), where h is the height of the tree.",
  "boilerplateCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        // Your code here\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        # Your code here\n        pass",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        // Your code here\n    }\n};"
  },
  "solutionCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // Recursive approach\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        // Base case: if the tree is empty, create a new node as the root\n        if (root == null) {\n            return new TreeNode(val);\n        }\n        \n        // Recursively insert into the appropriate subtree\n        if (val < root.val) {\n            // Insert into the left subtree\n            root.left = insertIntoBST(root.left, val);\n        } else {\n            // Insert into the right subtree\n            root.right = insertIntoBST(root.right, val);\n        }\n        \n        return root;\n    }\n    \n    // Iterative approach\n    public TreeNode insertIntoBSTIterative(TreeNode root, int val) {\n        // If the tree is empty, create a new node as the root\n        if (root == null) {\n            return new TreeNode(val);\n        }\n        \n        TreeNode curr = root;\n        \n        while (true) {\n            if (val < curr.val) {\n                // Insert into the left subtree\n                if (curr.left == null) {\n                    curr.left = new TreeNode(val);\n                    break;\n                } else {\n                    curr = curr.left;\n                }\n            } else {\n                // Insert into the right subtree\n                if (curr.right == null) {\n                    curr.right = new TreeNode(val);\n                    break;\n                } else {\n                    curr = curr.right;\n                }\n            }\n        }\n        \n        return root;\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # Recursive approach\n    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        # Base case: if the tree is empty, create a new node as the root\n        if not root:\n            return TreeNode(val)\n        \n        # Recursively insert into the appropriate subtree\n        if val < root.val:\n            # Insert into the left subtree\n            root.left = self.insertIntoBST(root.left, val)\n        else:\n            # Insert into the right subtree\n            root.right = self.insertIntoBST(root.right, val)\n        \n        return root\n    \n    # Iterative approach\n    def insertIntoBSTIterative(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        # If the tree is empty, create a new node as the root\n        if not root:\n            return TreeNode(val)\n        \n        curr = root\n        \n        while True:\n            if val < curr.val:\n                # Insert into the left subtree\n                if not curr.left:\n                    curr.left = TreeNode(val)\n                    break\n                else:\n                    curr = curr.left\n            else:\n                # Insert into the right subtree\n                if not curr.right:\n                    curr.right = TreeNode(val)\n                    break\n                else:\n                    curr = curr.right\n        \n        return root",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // Recursive approach\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        // Base case: if the tree is empty, create a new node as the root\n        if (root == nullptr) {\n            return new TreeNode(val);\n        }\n        \n        // Recursively insert into the appropriate subtree\n        if (val < root->val) {\n            // Insert into the left subtree\n            root->left = insertIntoBST(root->left, val);\n        } else {\n            // Insert into the right subtree\n            root->right = insertIntoBST(root->right, val);\n        }\n        \n        return root;\n    }\n    \n    // Iterative approach\n    TreeNode* insertIntoBSTIterative(TreeNode* root, int val) {\n        // If the tree is empty, create a new node as the root\n        if (root == nullptr) {\n            return new TreeNode(val);\n        }\n        \n        TreeNode* curr = root;\n        \n        while (true) {\n            if (val < curr->val) {\n                // Insert into the left subtree\n                if (curr->left == nullptr) {\n                    curr->left = new TreeNode(val);\n                    break;\n                } else {\n                    curr = curr->left;\n                }\n            } else {\n                // Insert into the right subtree\n                if (curr->right == nullptr) {\n                    curr->right = new TreeNode(val);\n                    break;\n                } else {\n                    curr = curr->right;\n                }\n            }\n        }\n        \n        return root;\n    }\n};"
  },
  "testCases": {
    "visible": [
      {
        "input": {"root": [4,2,7,1,3], "val": 5},
        "output": [4,2,7,1,3,5]
      },
      {
        "input": {"root": [40,20,60,10,30,50,70], "val": 25},
        "output": [40,20,60,10,30,50,70,null,null,25]
      },
      {
        "input": {"root": [4,2,7,1,3,null,null,null,null,null,null], "val": 5},
        "output": [4,2,7,1,3,5]
      }
    ],
    "hidden": [
      {
        "input": {"root": [], "val": 5},
        "output": [5]
      },
      {
        "input": {"root": [1,null,2], "val": 3},
        "output": [1,null,2,null,null,null,3]
      },
      {
        "input": {"root": [10,5,15,3,7,null,18], "val": 6},
        "output": [10,5,15,3,7,null,18,null,null,6]
      }
    ]
  },
  "hints": [
    "Think about the properties of a BST: all nodes in the left subtree have values less than the node's value, and all nodes in the right subtree have values greater than the node's value",
    "To insert a node, find the correct position by traversing the tree",
    "If the value to insert is less than the current node's value, go to the left subtree",
    "If the value to insert is greater than the current node's value, go to the right subtree",
    "Continue this process until you reach a null pointer, then create a new node and attach it to its parent"
  ],
  "companies": ["Amazon", "Microsoft", "Google", "Facebook", "Bloomberg"],
  "tags": ["Binary Search Tree", "Tree", "Binary Tree"],
  "timeComplexity": "O(h) - where h is the height of the tree. In the worst case (skewed tree), this is O(n), but in a balanced BST, it would be O(log n).",
  "spaceComplexity": "O(h) for the recursive solution due to the recursion stack, where h is the height of the tree. For the iterative solution, the space complexity is O(1) since we only use a constant amount of extra space."
} 