{
  "id": "convert-sorted-array-to-bst",
  "title": "Convert Sorted Array to Binary Search Tree",
  "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.",
  "difficulty": "Easy",
  "constraints": [
    "1 <= nums.length <= 10^4",
    "-10^4 <= nums[i] <= 10^4",
    "nums is sorted in a strictly increasing order"
  ],
  "examples": [
    {
      "input": "nums = [-10,-3,0,5,9]",
      "output": "[0,-3,9,-10,null,5]",
      "explanation": "The height-balanced BST created is:\n      0\n     / \\\n   -3   9\n   /   /\n -10   5"
    },
    {
      "input": "nums = [1,3]",
      "output": "[3,1]",
      "explanation": "The height-balanced BST created is:\n    3\n   /\n  1"
    }
  ],
  "approach": "A height-balanced BST can be constructed from a sorted array by using a divide-and-conquer approach. Since the array is sorted, we can find the middle element and use it as the root. The elements to the left of the middle become the left subtree, and the elements to the right become the right subtree. We can apply this strategy recursively to build the entire BST. This approach ensures a height-balanced tree since we always divide the array in half, creating a tree with minimum height.",
  "boilerplateCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        // Your code here\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        # Your code here\n        pass",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        // Your code here\n    }\n};"
  },
  "solutionCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return null;\n        }\n        \n        return buildBST(nums, 0, nums.length - 1);\n    }\n    \n    private TreeNode buildBST(int[] nums, int left, int right) {\n        // Base case: when the subarray is empty\n        if (left > right) {\n            return null;\n        }\n        \n        // Find the middle element to use as the root\n        int mid = left + (right - left) / 2;\n        \n        // Create the root node with the value of the middle element\n        TreeNode root = new TreeNode(nums[mid]);\n        \n        // Recursively build the left and right subtrees\n        root.left = buildBST(nums, left, mid - 1);\n        root.right = buildBST(nums, mid + 1, right);\n        \n        return root;\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        if not nums:\n            return None\n        \n        def build_bst(left, right):\n            if left > right:\n                return None\n            \n            # Find the middle element to use as the root\n            mid = left + (right - left) // 2\n            \n            # Create the root node with the value of the middle element\n            root = TreeNode(nums[mid])\n            \n            # Recursively build the left and right subtrees\n            root.left = build_bst(left, mid - 1)\n            root.right = build_bst(mid + 1, right)\n            \n            return root\n        \n        return build_bst(0, len(nums) - 1)",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        if (nums.empty()) {\n            return nullptr;\n        }\n        \n        return buildBST(nums, 0, nums.size() - 1);\n    }\n    \nprivate:\n    TreeNode* buildBST(vector<int>& nums, int left, int right) {\n        // Base case: when the subarray is empty\n        if (left > right) {\n            return nullptr;\n        }\n        \n        // Find the middle element to use as the root\n        int mid = left + (right - left) / 2;\n        \n        // Create the root node with the value of the middle element\n        TreeNode* root = new TreeNode(nums[mid]);\n        \n        // Recursively build the left and right subtrees\n        root->left = buildBST(nums, left, mid - 1);\n        root->right = buildBST(nums, mid + 1, right);\n        \n        return root;\n    }\n};"
  },
  "testCases": {
    "visible": [
      {
        "input": {"nums": [-10,-3,0,5,9]},
        "output": [0,-3,9,-10,null,5]
      },
      {
        "input": {"nums": [1,3]},
        "output": [3,1]
      }
    ],
    "hidden": [
      {
        "input": {"nums": [1]},
        "output": [1]
      },
      {
        "input": {"nums": [-10,-8,-6,-4,-2,0,2,4,6,8,10]},
        "output": [0,-6,6,-10,-2,2,10,-8,-4,null,null,null,4,8]
      },
      {
        "input": {"nums": [1,2,3,4,5,6,7]},
        "output": [4,2,6,1,3,5,7]
      }
    ]
  },
  "hints": [
    "Use the fact that the array is sorted to construct a height-balanced BST",
    "The key to a height-balanced BST is to ensure that the number of nodes in the left and right subtrees differ by at most one",
    "The middle element of the sorted array should be the root of the BST",
    "Use a recursive approach to build the tree by finding the middle element for each subarray",
    "Consider using a helper function that takes the left and right boundaries of the current subarray"
  ],
  "companies": ["Amazon", "Microsoft", "Facebook", "Google", "Apple", "LinkedIn", "Adobe"],
  "tags": ["Binary Search Tree", "Array", "Tree", "Divide and Conquer", "Binary Tree"],
  "timeComplexity": "O(n) - We need to visit each element in the array once to build the tree, where n is the length of the array.",
  "spaceComplexity": "O(log n) - The height of a balanced BST is log n, which represents the maximum depth of the recursion stack. In the worst case, this becomes O(n) if the tree is skewed."
} 