{
  "id": "convert-bst-to-greater-tree",
  "title": "Convert BST to Greater Tree",
  "description": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.",
  "difficulty": "Medium",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 10^4]",
    "-10^4 <= Node.val <= 10^4",
    "All the values in the tree are unique",
    "root is guaranteed to be a valid binary search tree"
  ],
  "examples": [
    {
      "input": "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
      "output": "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
      "explanation": "In this transformation, all the original keys are increased by the sum of keys greater than them."
    },
    {
      "input": "root = [0,null,1]",
      "output": "[1,null,1]",
      "explanation": "The node with original key 0 now has key 1 (0 + 1), and the node with original key 1 keeps the same key because there are no keys greater than 1."
    },
    {
      "input": "root = [1,0,2]",
      "output": "[3,3,2]",
      "explanation": "The node with original key 0 has a new key 3 (0 + 1 + 2), the node with original key 1 has a new key 3 (1 + 2), and the node with original key 2 keeps the same key because there are no keys greater than 2."
    }
  ],
  "approach": "To convert a BST to a Greater Tree, we need to find the sum of all keys greater than each node's key. Since a BST has the property that all nodes in the right subtree have greater values, we can use a modified in-order traversal, but in reverse order: right -> node -> left. This is also known as a reverse in-order traversal.\n\nBy traversing the tree in this order, we visit all the nodes with values greater than the current node before visiting the node itself. We can maintain a running sum of all the values seen so far, and add this sum to each node's value as we visit it.\n\nThe time complexity of this approach is O(n), where n is the number of nodes in the tree, as we visit each node exactly once. The space complexity is O(h) for the recursion stack, where h is the height of the tree.",
  "boilerplateCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode convertBST(TreeNode root) {\n        // Your code here\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        # Your code here\n        pass",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        // Your code here\n    }\n};"
  },
  "solutionCode": {
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    // Recursive approach with a class variable\n    private int sum = 0;\n    \n    public TreeNode convertBST(TreeNode root) {\n        if (root != null) {\n            // Traverse right subtree first\n            convertBST(root.right);\n            \n            // Update the sum and the current node's value\n            sum += root.val;\n            root.val = sum;\n            \n            // Traverse left subtree\n            convertBST(root.left);\n        }\n        return root;\n    }\n    \n    // Alternative recursive approach with a helper method\n    public TreeNode convertBSTAlt(TreeNode root) {\n        convertBSTHelper(root, 0);\n        return root;\n    }\n    \n    private int convertBSTHelper(TreeNode node, int greaterSum) {\n        if (node == null) {\n            return greaterSum;\n        }\n        \n        // Traverse right subtree first\n        int rightSum = convertBSTHelper(node.right, greaterSum);\n        \n        // Update the current node's value\n        int oldVal = node.val;\n        node.val += rightSum;\n        \n        // Traverse left subtree\n        return convertBSTHelper(node.left, node.val);\n    }\n    \n    // Iterative approach using a stack\n    public TreeNode convertBSTIterative(TreeNode root) {\n        if (root == null) {\n            return null;\n        }\n        \n        Stack<TreeNode> stack = new Stack<>();\n        TreeNode node = root;\n        int sum = 0;\n        \n        while (!stack.isEmpty() || node != null) {\n            // Push all right nodes onto the stack\n            while (node != null) {\n                stack.push(node);\n                node = node.right;\n            }\n            \n            // Process the current node\n            node = stack.pop();\n            sum += node.val;\n            node.val = sum;\n            \n            // Move to the left subtree\n            node = node.left;\n        }\n        \n        return root;\n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # Recursive approach\n    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        self.sum = 0\n        \n        def reverse_inorder(node):\n            if not node:\n                return\n            \n            # Traverse right subtree first\n            reverse_inorder(node.right)\n            \n            # Update the sum and the current node's value\n            self.sum += node.val\n            node.val = self.sum\n            \n            # Traverse left subtree\n            reverse_inorder(node.left)\n        \n        reverse_inorder(root)\n        return root\n    \n    # Alternative approach with passing sum as parameter\n    def convertBSTAlt(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        def helper(node, greater_sum):\n            if not node:\n                return greater_sum\n            \n            # Traverse right subtree first\n            right_sum = helper(node.right, greater_sum)\n            \n            # Update the current node's value\n            old_val = node.val\n            node.val += right_sum\n            \n            # Traverse left subtree\n            return helper(node.left, node.val)\n        \n        helper(root, 0)\n        return root\n    \n    # Iterative approach using a stack\n    def convertBSTIterative(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:\n            return None\n        \n        stack = []\n        node = root\n        total_sum = 0\n        \n        while stack or node:\n            # Push all right nodes onto the stack\n            while node:\n                stack.append(node)\n                node = node.right\n            \n            # Process the current node\n            node = stack.pop()\n            total_sum += node.val\n            node.val = total_sum\n            \n            # Move to the left subtree\n            node = node.left\n        \n        return root",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    int sum = 0;\n    \n    // Helper for recursive approach\n    void reverseInorder(TreeNode* node) {\n        if (node == nullptr) {\n            return;\n        }\n        \n        // Traverse right subtree first\n        reverseInorder(node->right);\n        \n        // Update the sum and the current node's value\n        sum += node->val;\n        node->val = sum;\n        \n        // Traverse left subtree\n        reverseInorder(node->left);\n    }\n    \n    // Helper for alternative recursive approach\n    int convertBSTHelper(TreeNode* node, int greaterSum) {\n        if (node == nullptr) {\n            return greaterSum;\n        }\n        \n        // Traverse right subtree first\n        int rightSum = convertBSTHelper(node->right, greaterSum);\n        \n        // Update the current node's value\n        int oldVal = node->val;\n        node->val += rightSum;\n        \n        // Traverse left subtree\n        return convertBSTHelper(node->left, node->val);\n    }\n    \npublic:\n    // Recursive approach\n    TreeNode* convertBST(TreeNode* root) {\n        sum = 0;\n        reverseInorder(root);\n        return root;\n    }\n    \n    // Alternative recursive approach\n    TreeNode* convertBSTAlt(TreeNode* root) {\n        convertBSTHelper(root, 0);\n        return root;\n    }\n    \n    // Iterative approach using a stack\n    TreeNode* convertBSTIterative(TreeNode* root) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        \n        std::stack<TreeNode*> stack;\n        TreeNode* node = root;\n        int sum = 0;\n        \n        while (!stack.empty() || node != nullptr) {\n            // Push all right nodes onto the stack\n            while (node != nullptr) {\n                stack.push(node);\n                node = node->right;\n            }\n            \n            // Process the current node\n            node = stack.top();\n            stack.pop();\n            sum += node->val;\n            node->val = sum;\n            \n            // Move to the left subtree\n            node = node->left;\n        }\n        \n        return root;\n    }\n};"
  },
  "testCases": {
    "visible": [
      {
        "input": {"root": [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]},
        "output": [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
      },
      {
        "input": {"root": [0,null,1]},
        "output": [1,null,1]
      },
      {
        "input": {"root": [1,0,2]},
        "output": [3,3,2]
      }
    ],
    "hidden": [
      {
        "input": {"root": [3,2,4,1]},
        "output": [7,9,4,10]
      },
      {
        "input": {"root": [5,2,13]},
        "output": [18,20,13]
      },
      {
        "input": {"root": []},
        "output": []
      }
    ]
  },
  "hints": [
    "Consider the property of a BST: for any node, all nodes in its right subtree have greater values",
    "Think about the order in which you should traverse the BST to find the sum of all values greater than a given node",
    "A reverse in-order traversal (right -> node -> left) can help visit nodes in descending order of their values",
    "Maintain a running sum as you traverse the tree, and update each node's value by adding this sum",
    "You can solve this problem both recursively and iteratively using a stack"
  ],
  "companies": ["Amazon", "Microsoft", "Facebook", "Uber", "Apple"],
  "tags": ["Binary Search Tree", "Tree", "Depth-First Search", "Binary Tree"],
  "timeComplexity": "O(n) - where n is the number of nodes in the tree. We visit each node exactly once.",
  "spaceComplexity": "O(h) - for the recursion stack, where h is the height of the tree. In the worst case (skewed tree), this could be O(n)."
} 