{
  "title": "Largest Rectangle in Histogram",
  "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\nInput Format:\n- The first line contains a single integer T, the number of test cases.\n- For each test case, one line contains an array of integers representing the heights of the bars in the histogram.\n\nOutput Format:\n- For each test case, print an integer representing the area of the largest rectangle in the histogram.",
  "constraints": {
    "timeLimit": 1000,
    "memoryLimit": 256
  },
  "constraintsDesc": [
    "1 <= heights.length <= 10^5",
    "0 <= heights[i] <= 10^4",
    "1 <= T <= 100"
  ],
  "examples": [
    {
      "input": "2\n[2,1,5,6,2,3]\n[2,4]",
      "output": "10\n4",
      "explanation": "Test case 1:\nThe largest rectangle has an area of 10 units, formed by the bars at indices 2-3 where heights are [5,6]. The rectangle has a width of 2 and a height of 5.\n\nTest case 2:\nThe largest rectangle has an area of 4 units, formed by either bar at index 0 (height 2, width 2) or the bar at index 1 (height 4, width 1)."
    }
  ],
  "type": "programming",
  "difficultyLevel": "hard",
  "marks": 15,
  "tags": ["Stack", "Array", "Monotonic Stack"],
  "maintag": "Data Structures & Algorithms",
  "companies": ["Amazon", "Microsoft", "Google", "Facebook", "Apple", "Bloomberg", "Adobe"],
  "hints": [
    "A brute force approach would be to consider every possible pair of bars as the left and right boundaries of the rectangle, but this is inefficient",
    "For each bar, if you can find the first smaller bar to its left and right, you can calculate the maximum rectangle with this bar as the height",
    "This can be efficiently implemented using a stack to keep track of increasing heights",
    "Using a monotonic stack approach can solve this problem in O(n) time"
  ],
  "languages": [
    {
      "name": "java",
      "version": "15.0.2",
      "boilerplateCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Calculates the area of the largest rectangle in the histogram\n     * @param heights An array of integers representing the heights of bars\n     * @return The area of the largest rectangle\n     */\n    public int largestRectangleArea(int[] heights) {\n        // Implement your solution here\n        return 0; // Replace with your implementation\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim());\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                String line = br.readLine().trim();\n                int[] heights = parseArray(line);\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int result = sol.largestRectangleArea(heights);\n                /*RUNTIME CALC END*/\n                \n                output.append(result);\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private static int[] parseArray(String s) {\n        // Remove brackets and split by comma\n        s = s.substring(1, s.length() - 1);\n        String[] parts = s.split(\",\");\n        \n        // Handle empty array\n        if (parts.length == 1 && parts[0].isEmpty()) {\n            return new int[0];\n        }\n        \n        int[] result = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            result[i] = Integer.parseInt(parts[i].trim());\n        }\n        \n        return result;\n    }\n}",
      "solutionCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Calculates the area of the largest rectangle in the histogram\n     * @param heights An array of integers representing the heights of bars\n     * @return The area of the largest rectangle\n     */\n    public int largestRectangleArea(int[] heights) {\n        if (heights == null || heights.length == 0) {\n            return 0;\n        }\n        \n        int n = heights.length;\n        Stack<Integer> stack = new Stack<>(); // Stack to store indices of bars\n        int maxArea = 0;\n        \n        // Process all bars one by one\n        for (int i = 0; i <= n; i++) {\n            // Current height (use 0 for the last bar to clear the stack)\n            int h = (i == n) ? 0 : heights[i];\n            \n            // If current bar is shorter than the bar at top of stack, calculate area for stack's top bar\n            while (!stack.isEmpty() && h < heights[stack.peek()]) {\n                int height = heights[stack.pop()];\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, height * width);\n            }\n            \n            // Push current bar's index to stack\n            stack.push(i);\n        }\n        \n        return maxArea;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim());\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                String line = br.readLine().trim();\n                int[] heights = parseArray(line);\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int result = sol.largestRectangleArea(heights);\n                /*RUNTIME CALC END*/\n                \n                output.append(result);\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private static int[] parseArray(String s) {\n        // Remove brackets and split by comma\n        s = s.substring(1, s.length() - 1);\n        String[] parts = s.split(\",\");\n        \n        // Handle empty array\n        if (parts.length == 1 && parts[0].isEmpty()) {\n            return new int[0];\n        }\n        \n        int[] result = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            result[i] = Integer.parseInt(parts[i].trim());\n        }\n        \n        return result;\n    }\n}"
    },
    {
      "name": "cpp",
      "version": "17",
      "boilerplateCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <algorithm>\n#include <sstream>\n\nclass Solution {\npublic:\n    /**\n     * Calculates the area of the largest rectangle in the histogram\n     * @param heights A vector of integers representing the heights of bars\n     * @return The area of the largest rectangle\n     */\n    int largestRectangleArea(std::vector<int>& heights) {\n        // Implement your solution here\n        return 0; // Replace with your implementation\n    }\n};\n\n// Helper function to parse input array\nstd::vector<int> parseArray(const std::string& s) {\n    std::vector<int> result;\n    std::string content = s.substr(1, s.length() - 2); // Remove brackets\n    \n    if (content.empty()) {\n        return result;\n    }\n    \n    std::istringstream iss(content);\n    std::string token;\n    \n    while (std::getline(iss, token, ',')) {\n        result.push_back(std::stoi(token));\n    }\n    \n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n    \n    for (int i = 0; i < t; i++) {\n        std::string line;\n        std::getline(std::cin, line);\n        \n        std::vector<int> heights = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        int result = sol.largestRectangleArea(heights);\n        /*RUNTIME CALC END*/\n        \n        std::cout << result;\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n    \n    return 0;\n}",
      "solutionCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <algorithm>\n#include <sstream>\n\nclass Solution {\npublic:\n    /**\n     * Calculates the area of the largest rectangle in the histogram\n     * @param heights A vector of integers representing the heights of bars\n     * @return The area of the largest rectangle\n     */\n    int largestRectangleArea(std::vector<int>& heights) {\n        if (heights.empty()) {\n            return 0;\n        }\n        \n        int n = heights.size();\n        std::stack<int> stack; // Stack to store indices of bars\n        int maxArea = 0;\n        \n        // Process all bars one by one\n        for (int i = 0; i <= n; i++) {\n            // Current height (use 0 for the last bar to clear the stack)\n            int h = (i == n) ? 0 : heights[i];\n            \n            // If current bar is shorter than the bar at top of stack, calculate area for stack's top bar\n            while (!stack.empty() && h < heights[stack.top()]) {\n                int height = heights[stack.top()];\n                stack.pop();\n                int width = stack.empty() ? i : i - stack.top() - 1;\n                maxArea = std::max(maxArea, height * width);\n            }\n            \n            // Push current bar's index to stack\n            stack.push(i);\n        }\n        \n        return maxArea;\n    }\n};\n\n// Helper function to parse input array\nstd::vector<int> parseArray(const std::string& s) {\n    std::vector<int> result;\n    std::string content = s.substr(1, s.length() - 2); // Remove brackets\n    \n    if (content.empty()) {\n        return result;\n    }\n    \n    std::istringstream iss(content);\n    std::string token;\n    \n    while (std::getline(iss, token, ',')) {\n        result.push_back(std::stoi(token));\n    }\n    \n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n    \n    for (int i = 0; i < t; i++) {\n        std::string line;\n        std::getline(std::cin, line);\n        \n        std::vector<int> heights = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        int result = sol.largestRectangleArea(heights);\n        /*RUNTIME CALC END*/\n        \n        std::cout << result;\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n    \n    return 0;\n}"
    },
    {
      "name": "python",
      "version": "3.9.0",
      "boilerplateCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Calculates the area of the largest rectangle in the histogram\n        :param heights: A list of integers representing the heights of bars\n        :return: The area of the largest rectangle\n        \"\"\"\n        # Implement your solution here\n        return 0 # Replace with your implementation\n\ndef parse_array(s: str) -> List[int]:\n    # Remove brackets and split by comma\n    s = s[1:-1]\n    if not s:\n        return []\n    return [int(x) for x in s.split(',')]\n\ndef main():\n    try:\n        # Read number of test cases\n        t = int(input().strip())\n        \n        results = []\n        for _ in range(t):\n            heights = parse_array(input().strip())\n            \n            # RUNTIME CALC START\n            sol = Solution()\n            result = sol.largestRectangleArea(heights)\n            # RUNTIME CALC END\n            \n            results.append(str(result))\n        \n        # Output all results\n        print('\\n'.join(results))\n    except Exception as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    main()",
      "solutionCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Calculates the area of the largest rectangle in the histogram\n        :param heights: A list of integers representing the heights of bars\n        :return: The area of the largest rectangle\n        \"\"\"\n        if not heights:\n            return 0\n        \n        n = len(heights)\n        stack = []  # Stack to store indices of bars\n        max_area = 0\n        \n        # Process all bars one by one\n        for i in range(n + 1):\n            # Current height (use 0 for the last bar to clear the stack)\n            h = 0 if i == n else heights[i]\n            \n            # If current bar is shorter than the bar at top of stack, calculate area for stack's top bar\n            while stack and h < heights[stack[-1]]:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            \n            # Push current bar's index to stack\n            stack.append(i)\n        \n        return max_area\n\ndef parse_array(s: str) -> List[int]:\n    # Remove brackets and split by comma\n    s = s[1:-1]\n    if not s:\n        return []\n    return [int(x) for x in s.split(',')]\n\ndef main():\n    try:\n        # Read number of test cases\n        t = int(input().strip())\n        \n        results = []\n        for _ in range(t):\n            heights = parse_array(input().strip())\n            \n            # RUNTIME CALC START\n            sol = Solution()\n            result = sol.largestRectangleArea(heights)\n            # RUNTIME CALC END\n            \n            results.append(str(result))\n        \n        # Output all results\n        print('\\n'.join(results))\n    except Exception as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "defaultLanguage": "java",
  "testCases": [
    {
      "input": "2\n[2,1,5,6,2,3]\n[2,4]",
      "output": "10\n4",
      "hidden": false,
      "explanation": "Basic test cases with different histogram patterns"
    },
    {
      "input": "3\n[1,1,1,1,1]\n[1,2,3,4,5]\n[5,4,3,2,1]",
      "output": "5\n9\n9",
      "hidden": true,
      "explanation": "Equal heights, monotonically increasing, and monotonically decreasing histograms"
    }
  ]
} 