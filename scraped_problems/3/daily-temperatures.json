{
  "title": "Daily Temperatures",
  "description": "Given an array of integers temperatures representing daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, put 0 instead.\n\nInput Format:\n- The first line contains a single integer T, the number of test cases.\n- For each test case, one line contains an array of integers representing the daily temperatures.\n\nOutput Format:\n- For each test case, print an array representing the number of days to wait for a warmer temperature.",
  "constraints": {
    "timeLimit": 1000,
    "memoryLimit": 256
  },
  "constraintsDesc": [
    "1 <= temperatures.length <= 10^5",
    "30 <= temperatures[i] <= 100",
    "1 <= T <= 100"
  ],
  "examples": [
    {
      "input": "2\n[73,74,75,71,69,72,76,73]\n[30,40,50,60]",
      "output": "[1,1,4,2,1,1,0,0]\n[1,1,1,0]",
      "explanation": "Test case 1:\nDay 1: 73 degrees -> Need to wait 1 day to get 74 degrees which is warmer\nDay 2: 74 degrees -> Need to wait 1 day to get 75 degrees which is warmer\nDay 3: 75 degrees -> Need to wait 4 days to get 76 degrees which is warmer\nDay 4: 71 degrees -> Need to wait 2 days to get 72 degrees which is warmer\nDay 5: 69 degrees -> Need to wait 1 day to get 72 degrees which is warmer\nDay 6: 72 degrees -> Need to wait 1 day to get 76 degrees which is warmer\nDay 7: 76 degrees -> No future day is warmer\nDay 8: 73 degrees -> No future day is warmer\n\nTest case 2:\nDay 1: 30 degrees -> Need to wait 1 day to get 40 degrees which is warmer\nDay 2: 40 degrees -> Need to wait 1 day to get 50 degrees which is warmer\nDay 3: 50 degrees -> Need to wait 1 day to get 60 degrees which is warmer\nDay 4: 60 degrees -> No future day is warmer"
    }
  ],
  "type": "programming",
  "difficultyLevel": "medium",
  "marks": 10,
  "tags": ["Stack", "Array", "Monotonic Stack"],
  "maintag": "Data Structures & Algorithms",
  "companies": ["Amazon", "Microsoft", "Google", "Facebook", "Apple", "Uber", "Airbnb"],
  "hints": [
    "Using a loop to check each future day for every current day would be inefficient (O(nÂ²))",
    "Consider using a stack to keep track of indices of temperatures for which we haven't found a warmer future day yet",
    "When we find a warmer temperature, we can update all cooler temperatures in the stack at once",
    "This approach is called a monotonic decreasing stack"
  ],
  "languages": [
    {
      "name": "java",
      "version": "15.0.2",
      "boilerplateCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Returns an array where each element represents the number of days to wait for a warmer temperature\n     * @param temperatures Array of daily temperatures\n     * @return Array of waiting days\n     */\n    public int[] dailyTemperatures(int[] temperatures) {\n        // Implement your solution here\n        return new int[0]; // Replace with your implementation\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim());\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                String line = br.readLine().trim();\n                int[] temperatures = parseArray(line);\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int[] result = sol.dailyTemperatures(temperatures);\n                /*RUNTIME CALC END*/\n                \n                output.append(arrayToString(result));\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private static int[] parseArray(String s) {\n        // Remove brackets and split by comma\n        s = s.substring(1, s.length() - 1);\n        String[] parts = s.split(\",\");\n        \n        // Handle empty array\n        if (parts.length == 1 && parts[0].isEmpty()) {\n            return new int[0];\n        }\n        \n        int[] result = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            result[i] = Integer.parseInt(parts[i].trim());\n        }\n        \n        return result;\n    }\n    \n    private static String arrayToString(int[] arr) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        \n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n            if (i < arr.length - 1) {\n                sb.append(\",\");\n            }\n        }\n        \n        sb.append(\"]\");\n        return sb.toString();\n    }\n}",
      "solutionCode": "import java.util.*;\nimport java.io.*;\n\nclass Solution {\n    /**\n     * Returns an array where each element represents the number of days to wait for a warmer temperature\n     * @param temperatures Array of daily temperatures\n     * @return Array of waiting days\n     */\n    public int[] dailyTemperatures(int[] temperatures) {\n        int n = temperatures.length;\n        int[] answer = new int[n];\n        Stack<Integer> stack = new Stack<>(); // Stack to store indices of temperatures\n        \n        for (int currDay = 0; currDay < n; currDay++) {\n            int currTemp = temperatures[currDay];\n            \n            // While stack has indices and current temperature is warmer than temperature at top of stack\n            while (!stack.isEmpty() && currTemp > temperatures[stack.peek()]) {\n                int prevDay = stack.pop();\n                answer[prevDay] = currDay - prevDay; // Calculate days waited\n            }\n            \n            stack.push(currDay); // Push current day's index\n        }\n        \n        // Any indices left in stack have no warmer future temperature, so 0 (default) is correct\n        return answer;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(br.readLine().trim());\n            \n            StringBuilder output = new StringBuilder();\n            \n            for (int i = 0; i < t; i++) {\n                String line = br.readLine().trim();\n                int[] temperatures = parseArray(line);\n                \n                /*RUNTIME CALC START*/\n                Solution sol = new Solution();\n                int[] result = sol.dailyTemperatures(temperatures);\n                /*RUNTIME CALC END*/\n                \n                output.append(arrayToString(result));\n                \n                if (i < t - 1) {\n                    output.append(\"\\n\");\n                }\n            }\n            \n            System.out.println(output.toString());\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private static int[] parseArray(String s) {\n        // Remove brackets and split by comma\n        s = s.substring(1, s.length() - 1);\n        String[] parts = s.split(\",\");\n        \n        // Handle empty array\n        if (parts.length == 1 && parts[0].isEmpty()) {\n            return new int[0];\n        }\n        \n        int[] result = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            result[i] = Integer.parseInt(parts[i].trim());\n        }\n        \n        return result;\n    }\n    \n    private static String arrayToString(int[] arr) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        \n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n            if (i < arr.length - 1) {\n                sb.append(\",\");\n            }\n        }\n        \n        sb.append(\"]\");\n        return sb.toString();\n    }\n}"
    },
    {
      "name": "cpp",
      "version": "17",
      "boilerplateCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <sstream>\n\nclass Solution {\npublic:\n    /**\n     * Returns a vector where each element represents the number of days to wait for a warmer temperature\n     * @param temperatures Vector of daily temperatures\n     * @return Vector of waiting days\n     */\n    std::vector<int> dailyTemperatures(std::vector<int>& temperatures) {\n        // Implement your solution here\n        return {}; // Replace with your implementation\n    }\n};\n\n// Helper function to parse input array\nstd::vector<int> parseArray(const std::string& s) {\n    std::vector<int> result;\n    std::string content = s.substr(1, s.length() - 2); // Remove brackets\n    \n    if (content.empty()) {\n        return result;\n    }\n    \n    std::istringstream iss(content);\n    std::string token;\n    \n    while (std::getline(iss, token, ',')) {\n        result.push_back(std::stoi(token));\n    }\n    \n    return result;\n}\n\n// Helper function to convert array to string\nstd::string arrayToString(const std::vector<int>& arr) {\n    std::string result = \"[\";\n    \n    for (size_t i = 0; i < arr.size(); i++) {\n        result += std::to_string(arr[i]);\n        if (i < arr.size() - 1) {\n            result += \",\";\n        }\n    }\n    \n    result += \"]\";\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n    \n    for (int i = 0; i < t; i++) {\n        std::string line;\n        std::getline(std::cin, line);\n        \n        std::vector<int> temperatures = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<int> result = sol.dailyTemperatures(temperatures);\n        /*RUNTIME CALC END*/\n        \n        std::cout << arrayToString(result);\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n    \n    return 0;\n}",
      "solutionCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <sstream>\n\nclass Solution {\npublic:\n    /**\n     * Returns a vector where each element represents the number of days to wait for a warmer temperature\n     * @param temperatures Vector of daily temperatures\n     * @return Vector of waiting days\n     */\n    std::vector<int> dailyTemperatures(std::vector<int>& temperatures) {\n        int n = temperatures.size();\n        std::vector<int> answer(n, 0); // Initialize with 0s\n        std::stack<int> stack; // Stack to store indices of temperatures\n        \n        for (int currDay = 0; currDay < n; currDay++) {\n            int currTemp = temperatures[currDay];\n            \n            // While stack has indices and current temperature is warmer than temperature at top of stack\n            while (!stack.empty() && currTemp > temperatures[stack.top()]) {\n                int prevDay = stack.top();\n                stack.pop();\n                answer[prevDay] = currDay - prevDay; // Calculate days waited\n            }\n            \n            stack.push(currDay); // Push current day's index\n        }\n        \n        // Any indices left in stack have no warmer future temperature, so 0 (default) is correct\n        return answer;\n    }\n};\n\n// Helper function to parse input array\nstd::vector<int> parseArray(const std::string& s) {\n    std::vector<int> result;\n    std::string content = s.substr(1, s.length() - 2); // Remove brackets\n    \n    if (content.empty()) {\n        return result;\n    }\n    \n    std::istringstream iss(content);\n    std::string token;\n    \n    while (std::getline(iss, token, ',')) {\n        result.push_back(std::stoi(token));\n    }\n    \n    return result;\n}\n\n// Helper function to convert array to string\nstd::string arrayToString(const std::vector<int>& arr) {\n    std::string result = \"[\";\n    \n    for (size_t i = 0; i < arr.size(); i++) {\n        result += std::to_string(arr[i]);\n        if (i < arr.size() - 1) {\n            result += \",\";\n        }\n    }\n    \n    result += \"]\";\n    return result;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    \n    int t;\n    std::cin >> t;\n    std::cin.ignore(); // Consume newline\n    \n    for (int i = 0; i < t; i++) {\n        std::string line;\n        std::getline(std::cin, line);\n        \n        std::vector<int> temperatures = parseArray(line);\n        \n        /*RUNTIME CALC START*/\n        Solution sol;\n        std::vector<int> result = sol.dailyTemperatures(temperatures);\n        /*RUNTIME CALC END*/\n        \n        std::cout << arrayToString(result);\n        \n        if (i < t - 1) {\n            std::cout << \"\\n\";\n        }\n    }\n    \n    return 0;\n}"
    },
    {
      "name": "python",
      "version": "3.9.0",
      "boilerplateCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        \"\"\"\n        Returns a list where each element represents the number of days to wait for a warmer temperature\n        :param temperatures: List of daily temperatures\n        :return: List of waiting days\n        \"\"\"\n        # Implement your solution here\n        return [] # Replace with your implementation\n\ndef parse_array(s: str) -> List[int]:\n    # Remove brackets and split by comma\n    s = s[1:-1]\n    if not s:\n        return []\n    return [int(x) for x in s.split(',')]\n\ndef array_to_string(arr: List[int]) -> str:\n    return \"[\" + \",\".join(map(str, arr)) + \"]\"\n\ndef main():\n    try:\n        # Read number of test cases\n        t = int(input().strip())\n        \n        results = []\n        for _ in range(t):\n            temperatures = parse_array(input().strip())\n            \n            # RUNTIME CALC START\n            sol = Solution()\n            result = sol.dailyTemperatures(temperatures)\n            # RUNTIME CALC END\n            \n            results.append(array_to_string(result))\n        \n        # Output all results\n        print('\\n'.join(results))\n    except Exception as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    main()",
      "solutionCode": "import sys\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        \"\"\"\n        Returns a list where each element represents the number of days to wait for a warmer temperature\n        :param temperatures: List of daily temperatures\n        :return: List of waiting days\n        \"\"\"\n        n = len(temperatures)\n        answer = [0] * n  # Initialize with 0s\n        stack = []  # Stack to store indices of temperatures\n        \n        for curr_day in range(n):\n            curr_temp = temperatures[curr_day]\n            \n            # While stack has indices and current temperature is warmer than temperature at top of stack\n            while stack and curr_temp > temperatures[stack[-1]]:\n                prev_day = stack.pop()\n                answer[prev_day] = curr_day - prev_day  # Calculate days waited\n            \n            stack.append(curr_day)  # Push current day's index\n        \n        # Any indices left in stack have no warmer future temperature, so 0 (default) is correct\n        return answer\n\ndef parse_array(s: str) -> List[int]:\n    # Remove brackets and split by comma\n    s = s[1:-1]\n    if not s:\n        return []\n    return [int(x) for x in s.split(',')]\n\ndef array_to_string(arr: List[int]) -> str:\n    return \"[\" + \",\".join(map(str, arr)) + \"]\"\n\ndef main():\n    try:\n        # Read number of test cases\n        t = int(input().strip())\n        \n        results = []\n        for _ in range(t):\n            temperatures = parse_array(input().strip())\n            \n            # RUNTIME CALC START\n            sol = Solution()\n            result = sol.dailyTemperatures(temperatures)\n            # RUNTIME CALC END\n            \n            results.append(array_to_string(result))\n        \n        # Output all results\n        print('\\n'.join(results))\n    except Exception as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "defaultLanguage": "java",
  "testCases": [
    {
      "input": "2\n[73,74,75,71,69,72,76,73]\n[30,40,50,60]",
      "output": "[1,1,4,2,1,1,0,0]\n[1,1,1,0]",
      "hidden": false,
      "explanation": "Basic test cases with various temperature patterns"
    },
    {
      "input": "3\n[89,62,70,58,47,47,46,76,100,70]\n[55,38,53,81,61,93,97,32,43,78]\n[34,80,80,80,34,80,80,80,34,80]",
      "output": "[9,1,1,3,2,1,1,1,0,0]\n[3,1,1,0,1,1,0,3,1,0]\n[1,0,0,0,1,0,0,0,1,0]",
      "hidden": true,
      "explanation": "Complex temperature patterns including repeating values and periods of increasing/decreasing temperatures"
    }
  ]
} 